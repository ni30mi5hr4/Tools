#!/bin/sh

#############################
# Linux Installation Script #
#############################

# Define the root directory to /home/runner.
# We can only write in /home/runner and /tmp in the runner/RDP.
ROOTFS_DIR=/home/runner

# Update PATH
export PATH=$PATH:~/.local/usr/bin

# Retry and timeout settings
max_retries=5
timeout=10

# Detect the machine architecture
ARCH=$(uname -m)

# Check machine architecture and set alternative name
case "$ARCH" in
    x86_64) ARCH_ALT=amd64 ;;
    aarch64) ARCH_ALT=arm64 ;;
    *) echo "Unsupported CPU architecture: ${ARCH}"
       exit 1 ;;
esac

# Function to download and extract rootfs
download_and_extract() {
    url=$1
    dest=$2
    wget --tries="$max_retries" --timeout="$timeout" --no-hsts -O "$dest" "$url"
    if [ $? -ne 0 ]; then
        echo "Error downloading $url"
        exit 1
    fi
    tar -xf "$dest" -C "$ROOTFS_DIR"
}

# Download & decompress the Linux root file system if not already installed
if [ ! -e "$ROOTFS_DIR/.installed" ]; then
    echo "Select the desired Linux distribution:"
    echo "* [0] Debian"
    echo "* [1] Ubuntu - RDP Support"
    echo "* [2] Alpine"

    read -r -p "Enter your choice (0-2): " input

    case $input in
        0) download_and_extract \
           "https://github.com/termux/proot-distro/releases/download/v3.10.0/debian-${ARCH}-pd-v3.10.0.tar.xz" \
           "/tmp/rootfs.tar.xz"
           ;;
        1) download_and_extract \
           "http://cdimage.ubuntu.com/ubuntu-base/releases/20.04/release/ubuntu-base-20.04.4-base-${ARCH_ALT}.tar.gz" \
           "/tmp/rootfs.tar.gz"
           ;;
        2) download_and_extract \
           "https://dl-cdn.alpinelinux.org/alpine/v3.18/releases/${ARCH}/alpine-minirootfs-3.18.3-${ARCH}.tar.gz" \
           "/tmp/rootfs.tar.gz"
           ;;
        *) echo "Invalid choice. Exiting."
           exit 1 ;;
    esac
fi

# Download static PRoot binary if not installed
if [ ! -e "$ROOTFS_DIR/.installed" ]; then
    mkdir -p "$ROOTFS_DIR/usr/local/bin"
    proot_url="https://raw.githubusercontent.com/dxomg/vpsfreepterovm/main/proot-${ARCH}"
    wget --tries="$max_retries" --timeout="$timeout" --no-hsts -O "$ROOTFS_DIR/usr/local/bin/proot" "$proot_url"
    if [ $? -ne 0 ] || [ ! -s "$ROOTFS_DIR/usr/local/bin/proot" ]; then
        echo "Error downloading PRoot binary"
        exit 1
    fi
    chmod 755 "$ROOTFS_DIR/usr/local/bin/proot"
fi

# Clean-up and final setup
if [ ! -e "$ROOTFS_DIR/.installed" ]; then
    echo "nameserver 1.1.1.1\nnameserver 1.0.0.1" > "${ROOTFS_DIR}/etc/resolv.conf"
    rm -rf /tmp/rootfs.tar.xz /tmp/rootfs.tar.gz
    touch "$ROOTFS_DIR/.installed"
fi

# Define color variables for output
BLACK='\033[0;30m'
BOLD_BLACK='\033[1;30m'
RED='\033[0;31m'
BOLD_RED='\033[1;31m'
GREEN='\033[0;32m'
BOLD_GREEN='\033[1;32m'
YELLOW='\033[0;33m'
BOLD_YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD_BLUE='\033[1;34m'
MAGENTA='\033[0;35m'
BOLD_MAGENTA='\033[1;35m'
CYAN='\033[0;36m'
BOLD_CYAN='\033[1;36m'
WHITE='\033[0;37m'
BOLD_WHITE='\033[1;37m'
RESET_COLOR='\033[0m'

# Display system information
display_info() {
    echo -e "${BOLD_MAGENTA}System Information:${RESET_COLOR}"
    echo -e " CPU: ${YELLOW}$(lscpu | grep 'Model name' | cut -d':' -f2- | sed 's/^ *//;s/  \+/ /g')${RESET_COLOR}"
    # Additional information can be added here
}

# Main execution
clear
display_info

# Start PRoot environment
$ROOTFS_DIR/usr/local/bin/proot \
    --rootfs="${ROOTFS_DIR}" \
    -0 -w "/root" -b /dev -b /sys -b /proc -b /etc/resolv.conf --kill-on-exit
